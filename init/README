The preinit configuration file supports a compact language making it possible
to prepare a working rootfs and mount it before init is executed. It is meant
to be called as the init executable (pid1) and it transfers the execution to
the original init once done. It supports printing messages, using environment
variables and default values, testing for variable values and file existence,
mounting file systems, pivoting roots, and features an interactive mode.

Spaces and tabs are used as word delimiters, and are ignored at the beginning
of lines. Single and double quotes can be used to enclose words containing
spaces or tabs. Empty lines are ignored, as well as anything following a '#'
character till the end of the line.

Most commands are two-character long though some older ones also exist in a
single character flavour. Most commands take arguments. All of them have a
minimum number of expected arguments, and extra arguments are silently ignored.

The command reference follows, alphabetically sorted by command name, followed
by the short form if any, and arguments, then a description of what the command
does on the next line :

Cmd Short Args + description
--------------------------------------------------------------------------------
.         <none>
          (single dot). End evaluation in interactive mode and return back to
          the calling point, generally the config file.
--------------------------------------------------------------------------------
bi    K   <src> <dst>
          Bind mounting point of directory <src> to <dst> (mount --bind).
--------------------------------------------------------------------------------
bl    B   <mode> <uid> <gid> <major> <minor> <naming_rule>
          Create block devices, see below for the rules.
--------------------------------------------------------------------------------
br        <cmd> [<args>]
          Branch to program <cmd> with args without forking (execve).
--------------------------------------------------------------------------------
ca        <path>
          Cat: display contents of file <path>.
--------------------------------------------------------------------------------
cd        <dir>
          Change current directory to <dir>.
--------------------------------------------------------------------------------
ch    C   <mode> <uid> <gid> <major> <minor> <naming_rule>
          Create character devices, see below for the rules.
--------------------------------------------------------------------------------
cp        <src> <dst>
          Copy contents of file <src> to file <dst> (which may exist).
--------------------------------------------------------------------------------
cr        <dir>
          Change root to dir <dir> without changing the current directory.
--------------------------------------------------------------------------------
ec        [<string>]
          Echo: print the string to the standard output.
--------------------------------------------------------------------------------
en        <none>
          Env: list environment variables to the standard output.
--------------------------------------------------------------------------------
eq        <str1> <str2>
          Compare if string <str1> is equal to string <str2>, return OK if so.
--------------------------------------------------------------------------------
ex    E   <cmd> [<args>]
          Execute program <cmd> with args, forking. Status sets error flag.
--------------------------------------------------------------------------------
fi    F   <mode> <uid> <gid> <name>
          Create a fifo <name> owned by <uid>/<gid> with permissions <mode>.
--------------------------------------------------------------------------------
fp        <img> <fstype>*
          Find the system partitions for boot image <img>. <img> supports
          "active" or "image1" for the first image, "backup" or "image2" for
          the second image. <fstype> is an optional space-delimited list of
          file system types to look for (ext2, ext4, xfs and squashfs are
          supported). If the selected image is found, environment variables
          "chosen_part" and "chosen_type" are set to the partition and FS type
          respectively. If the other image is found, environment variables
          "second_part" and "second_type" are set to the partition and FS type
          respectively. Partitions are detected as being two of the exact same
          size (at least 16 MB) somewhere after an ext* partition corresponding
          to /flash.
--------------------------------------------------------------------------------
ha        <none>
          Halt the system.
--------------------------------------------------------------------------------
in    I   <path>
          Sets the path to the init program to transfer the control to after
          the end of the configuration file is reached. The program will be
          called with the exact same arguments as the first init. When running
          in interactive mode, setting this ends the interactive mode so that
          the execution continues. By default the init program is
          "/sbin/init-sysv". If an "INIT=<path>" statement is found on the boot
          command line (/proc/cmdline), this path will be used instead. If the
          init program cannot be executed, the program will exit in error,
          likely causing a kernel panic.
--------------------------------------------------------------------------------
ln    L   <src> <dst>
          create a symlink from <src> to <dst>.
--------------------------------------------------------------------------------
lo    l   <loopdev> <file>
          Set up loop device loopdev from file <file>.
--------------------------------------------------------------------------------
lp        <none>
          List partitions on supported block devices found in /proc/partitions,
          with their sizes and detected file system when possible. mtdblock,
          ramdisks, loop and dm-XX are ignored. This is only used for debugging
          in interactive mode.
--------------------------------------------------------------------------------
ls        [-l|-e] <dir>
          List contents of directory <dir>. Prefix with file type when using
          "-l". Only check if something exists when using "-e", returning OK if
          something is found, NOK otherwise.
--------------------------------------------------------------------------------
kx        <kernel> [<initrd>|"-"] [<cmdline>*]
          Loads kernel image <kernel>, optional initrd image <initrd> (ignored
          if '-'), and boots it using kexec. If <cmdline> is given, all such
          arguments become the new kernel's command line arguments. Otherwise
          an exact copy of the current kernel's arguments is retrieved from
          /proc/cmdline and passed as-is. The kernel is immediately booted, so
          the function only returns in case of failure.
--------------------------------------------------------------------------------
ma    U   <mask>
          Change program's umask to <mask> (octal)
--------------------------------------------------------------------------------
md    D   <path> [<mode>]
          create a directory <path> with mode <mode>, or 0755 if unspecified.
--------------------------------------------------------------------------------
mt    M   <dev[\[major:minor\]]> <mnt> <type> [ro|rw] [<opts>]
          mount <dev> on <mnt> using file system type <type> and options <opts>.
          The mount may be force read-only using "ro" or read-write using "rw",
          though read-only is used by default. If [major:minor] are specified
          (including the square brackets), then the device is created with these
          elements and permissions mode 0600. If <type> is "auto", then the
          command tries to detect the FS type.
--------------------------------------------------------------------------------
mv    K   <src> <dst>
          Move mounting point of directory <src> to <dst> (mount --move).
--------------------------------------------------------------------------------
po        <none>
          Power off.
--------------------------------------------------------------------------------
pr    P   <new_root> <old_root>
          Pivot root to <new_root> and move the old one to <old_root> inside.
--------------------------------------------------------------------------------
rb        <none>
          Reboot.
--------------------------------------------------------------------------------
rd        [<string>]
          Print the string and read commands from the console, use '.' to end.
--------------------------------------------------------------------------------
re        <dev> <mnt> <type> [ro|rw] [<opts>]
          Remount. Same options as mount but <dev> is ignored.
--------------------------------------------------------------------------------
rf        <file|dir>...
          Read files or files found in dirs, and use them to feed the RNG.
--------------------------------------------------------------------------------
rm        <file>...
          Remove file(s) <file>.
--------------------------------------------------------------------------------
rx    R   <dir> <cmd> [<args>]
          Same as "ex" but chroots to <dir> first.
--------------------------------------------------------------------------------
se        <name> [<value>]
          Setenv: with a value, sets environment variable <name> to <value>, or
          replace it if it already exists. Without a value, unsets environment
          variable <name>.
--------------------------------------------------------------------------------
sl        <delay>[.<frac>]
          Sleep for <delay> seconds, or forever if negative or "inf"
--------------------------------------------------------------------------------
sp        <none>
          Suspend (may not always be supported).
--------------------------------------------------------------------------------
st        <file>
          Stat: test for existence of <file>, return OK if it exists.
--------------------------------------------------------------------------------
sw        <new_root>
          Switch root and reopen console from new root if it exists.
--------------------------------------------------------------------------------
ta        t|x|xv <file> <dir>
          Tar test/extract/verbose_extract <file> to <dir>. Return OK on
          success.
--------------------------------------------------------------------------------
td        <none>
          Test if /dev is a mounted devtmpfs, returns OK or NOK.
--------------------------------------------------------------------------------
te        <var>=<value>
          Test if environment variable <var> equals value <value>.
--------------------------------------------------------------------------------
tn        <string>
          Test if a string is non-empty. This is essentially used to test if an
          environment variable is set.
--------------------------------------------------------------------------------
um    O   <dir>
          Unmount directory <dir>.
--------------------------------------------------------------------------------
wk        <string> <delay>
          Print <string> and wait up to <delay> seconds for a key. Return OK if
          a key is pressed withing the delay, otherwise NOK.
--------------------------------------------------------------------------------
{         <none>
          Start a block of sequential commands. Useful to group many of them as
          the result of a condition. Up to 10 levels may be embedded. When in
          interactive mode, the prompt changes to display as many ">" characters
          as the current level.
--------------------------------------------------------------------------------
}         <none>
          Close a block of sequential commands and return the status of the last
          command in the block.
--------------------------------------------------------------------------------

Any command above may be prefixed with one of the following modifiers :
  - '|' : the command will only be executed if the previous command failed
  - '&' : the command will only be executed if the previous command succeeded
  - '!' : the resulting status of the command will be reversed

Environment variables can be passed on the kernel command line by passing
statements of the form "var=value". Each command argument may reference an
environment variable and an optional default value. Syntax is similar to the
Bourne shell with braces :  ${var} and ${var-default}. The default value will
be used if the variable is not set, not if it's empty. An unset variable with
no default value will return an empty string. The variables are not evaluated
within quotes, but quotes can stop before the '$' sign and start again after
the brace without breaking the word.

The devices naming rules consist in strings mixed with numbering rules delimited
with brackets. Each numbering rule has 4 comma-delimited fields :
  - type of this string portion :
    - 'c' for a single char
    - 'i' for an int
    - 'I' for an int for which 0 is not printed (useful for partitions)
    - 'h' for an hex digit (useful for ttys)

  - the range :
      - chars: any concatenation of character ranges separated with a dash '-',
        such as for example "a-fk-npq" ;

      - ints : either an int or a range composed of 2 ints separated with a
        dash, such as for example "1-16"

      - hex  : same as int, but with hex digits (case insensitive)

  - the scale : how much to add to the minor device for each step in the range.

The configuration file is limited to 16kB in length, though it may be changed
using a config macro in the source code.

Example of configuration file :

  td                            # test if /dev is of type devtmpfs
  |{                            # if not, execute the following commands
  ln hda3 /dev/disk             # symlinks /dev/disk to hda3
  md /var/tmp 1777              # creates a directory /var/tmp with mode 1777
  mt /dev/hda1 /boot ext2       # attempts to mount /dev/hda1 read-only under /boot.
  |mt /dev/hda1(3:1) /boot ext2 # only if the previous command failed, creates
                                # /dev/hda1 with major 3, minor 1 and mounts
                                # it read-only under /boot
  ex /sbin/ird /dev/ram6 1200   # executes /sbin/ird with these args and waits
                                # for its completion
  bl 0600 0 0 3 1 hd[c,ab,64][i,1-16,1]     # makes all hdaX and hdbX with X
                                            # ranging from 1 to 16
  ch 0600 0 5 2 0 pty[c,p-za-f,16][h,0-f,1] # makes all 256 pty*
  #comment => ignore this line
  }                             # end of the conditional commands
  in /sbin/init-std             # the following init will be this /sbin/init-std

When the program is not called as PID 1, as "linuxrc" nor with a "rebuild"
argument, then the first argument will be checked for "-z". If it matches, then
the subsequent arguments will constitute a command to be executed inline. For
example, "init -z help" will show the help, and "init -z rd" will enter
interactive mode. This can be useful from scripts which need to benefit from
embedded commands.
